//sum and product

public class Main {
    public static void main(String[] args) {
        int[] arr={1,2,3,4};
        int len=arr.length;
        int s=0; int p=1;
        int ind=0;
        for(int i:arr){
            s=s+i;
            p=p*i;
            ind++;
        }
        System.out.print("sum:"+s);
        System.out.print("\nproduct:"+p);   
    }
}


//sum
public class Main {
    public static void main(String[] args) {
        int[] arr={2,7,11,15};
        int t=9;
        for( int i=0;i<arr.length;i++){
            for( int j=i+1;j<arr.length;j++){
                if(arr[i]+arr[j]==t){
                    System.out.println("["+i+","+j+"]");
                }
            }
        }
    
                }
                
            }
//2 lagest
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr={2,5,3,6,8};
    
        Arrays.sort(arr);
        System.out.println(Arrays.toString(arr));
        System.out.println(arr[arr.length-2]);
                }
                
            }
//count of no
public class Main {
    public static void main(String[] args) {
        int[] arr={1,2,3,4,2,1,2};
        int len=arr.length;
        int c=0; 
        int t=2;
        int ind=0;
        for(int i:arr){
           if(i==t){
               c=c+1;
               ind++;
           }
       }  
        System.out.println("Count of occurence:"+c);
        }
    }

//hashmap
import java.util.*;
public class Main {
    public static void main(String[] args) {
       HashMap<String, Integer> hashMap = new HashMap<>();
      
      // Add elements to the HashMap
      hashMap.put("ram", 25);
      hashMap.put("maga", 30);
      hashMap.put("rossy", 35);
      System.out.println(hashMap.get("ram"));
      hashMap.remove("rossy");
      System.out.println("" +hashMap );  
      for( <String, Integer> mapElement : hashMap.entrySet()) {
          Integer k = mapElement.getKey();
          String v = mapElement.getValue();
          
          
      }  
}
}

//[Find Common Elements Between Two Arrays

class Solution {
public int[] findIntersectionValues(int[] nums1, int[] nums2) {
HashSet s1 = new HashSet<>();
HashSet s2 = new HashSet<>();
for (int n : nums1) {
s1.add(n);
}
for (int n : nums2) {
s2.add(n);
}
int c=0;
int c1=0;
for(int i:nums1){
if(s2.contains(i)){
c++;
}
}
for(int i:nums2){
if(s1.contains(i)){
c1++;
}
}
return new int[]{c, c1};
}
}

//dupicate

lass Solution {
public boolean containsDuplicate(int[] nums) {
HashSet s = new HashSet<>();
for (int num : nums) {
s.add(num);
}
if(s.size() == nums.length){
return false;

   }else{
      return true;
   } 
}
}


//sum of unique
class Solution {
public int sumOfUnique(int[] nums) {
HashSet s = new HashSet<>();
for (int num : nums) {
s.add(num);
}
int a=0;
for(int i:s){
if (map.get(i) == 1) {
a+= i;
}
}
return a;
}
}


//Contains Duplicate

class Solution {
public boolean containsDuplicate(int[] nums) {
HashSet s = new HashSet<>();
for (int num : nums) {
s.add(num);
}
if(s.size() == nums.length){
return false;

   }else{
      return true;
   } 
}
}


//First Missing Positive
class Solution {
    public int firstMissingPositive(int[] nums) {
        HashSet s = new HashSet<>();
        for (int num : nums) {
           s.add(num);
        }
    int v=1;
    while(s.contains(v)){
        v++;
    }
    return v;     
    }
}


//inventry management system
import java.util.ArrayList;
import java.util.Scanner;

public class inventorysystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<product> inventory = new ArrayList<>();
        int choice;

        do {
            System.out.println("===== Inventory System Menu =====");
            System.out.println("1. Add Product");
            System.out.println("2. Display All Products");
            System.out.println("3. Update Product Quantity");
            System.out.println("4. Remove Product");
            System.out.println("5. Search Product by ID");
            System.out.println("6. Calculate Inventory Value");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch(choice) {
                case 1:
                    // Add Product
                    product newProduct = new product();
                    System.out.print("Enter product id: ");
                    int id = scanner.nextInt();
                    newProduct.setId(id);
                    
                    System.out.print("Enter product name: ");
                    // Consume the newline left-over
                    scanner.nextLine();
                    String name = scanner.nextLine();
                    newProduct.setName(name);
                    
                    System.out.print("Enter product quantity: ");
                    int quantity = scanner.nextInt();
                    newProduct.setQuantity(quantity);
                    
                    System.out.print("Enter product price: ");
                    float price = scanner.nextFloat();
                    newProduct.setPrice(price);
                    
                    inventory.add(newProduct);
                    System.out.println("Product added successfully!");
                    break;
                    
                case 2:
                    // Display All Products
                    if (inventory.isEmpty()) {
                        System.out.println("No products available.");
                    } else {
                        System.out.println("List of Products:");
                        for (product p : inventory) {
                            System.out.println("ID: " + p.getId() + 
                                               ", Name: " + p.getName() +
                                               ", Quantity: " + p.getQuantity() +
                                               ", Price: " + p.getPrice());
                        }
                    }
                    break;
                    
                case 3:
                    // Update Product Quantity
                    System.out.print("Enter product id to update quantity: ");
                    int updateId = scanner.nextInt();
                    boolean foundUpdate = false;
                    for (product p : inventory) {
                        if (p.getId() == updateId) {
                            System.out.print("Enter new quantity: ");
                            int newQuantity = scanner.nextInt();
                            p.setQuantity(newQuantity);
                            System.out.println("Product quantity updated successfully!");
                            foundUpdate = true;
                            break;
                        }
                    }
                    if (!foundUpdate) {
                        System.out.println("Product not found.");
                    }
                    break;
                    
                case 4:
                    // Remove Product
                    System.out.print("Enter product id to remove: ");
                    int removeId = scanner.nextInt();
                    boolean foundRemove = false;
                    for (int i = 0; i < inventory.size(); i++) {
                        if (inventory.get(i).getId() == removeId) {
                            inventory.remove(i);
                            System.out.println("Product removed successfully!");
                            foundRemove = true;
                            break;
                        }
                    }
                    if (!foundRemove) {
                        System.out.println("Product not found.");
                    }
                    break;
                    
                case 5:
                    // Search Product by ID
                    System.out.print("Enter product id to search: ");
                    int searchId = scanner.nextInt();
                    boolean foundSearch = false;
                    for (product p : inventory) {
                        if (p.getId() == searchId) {
                            System.out.println("Product Found:");
                            System.out.println("ID: " + p.getId() +
                                               ", Name: " + p.getName() +
                                               ", Quantity: " + p.getQuantity() +
                                               ", Price: " + p.getPrice());
                            foundSearch = true;
                            break;
                        }
                    }
                    if (!foundSearch) {
                        System.out.println("Product not found.");
                    }
                    break;
                    
                case 6:
                    // Calculate Inventory Value
                    float totalValue = 0;
                    for (product p : inventory) {
                        totalValue += p.getPrice() * p.getQuantity();
                    }
                    System.out.println("Total Inventory Value: " + totalValue);
                    break;
                    
                case 7:
                    System.out.println("Exiting Inventory System. Goodbye!");
                    break;
                    
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
            
            System.out.println();
        } while (choice != 7);
        
        scanner.close();
    }
}

